#ifndef PLATFORM_PLATFORM_H_INC
#define PLATFORM_PLATFORM_H_INC
/*
	Platform call specification

	A compliant hardware platform must implement all of these.


	Stuart Wallace <stuartw@atom.net>, August 2015.

	NOTE: this is currently just a collection of thoughts.  It is not yet ready for use!
*/

#define IN_PLATFORM_H

#include <cpu/cpu.h>
#include <device/device.h>
#include <include/defs.h>
#include <memory/extents.h>
#include <include/types.h>

/* Parse platform-specific header */
#include <platform/platform_specific.h>

#define LED_RED             (0x80)
#define LED_GREEN           (0x40)
#define LED_ALL             (0xff)

extern mem_extent_t *g_mem_extents;
extern mem_extent_t *g_mem_extents_end;

s32 plat_init(void);		        /* Perform any post-reset platform init tasks   	        */
s32 plat_mem_detect();			    /* Populate g_mem_extents with type & location of memory    */
                                    /* Place an eight-byte hardware serial number in sn			*/
s32 plat_get_serial_number(u8 sn[8]);

s32 plat_install_timer_irq_handler(interrupt_handler handler);

/*
    Quantum (=time-slice) start/stop functions.  Platform code can define these as macros for better
    performance; if so, the platform-specific header should #define PLATFORM_QUANTUM_USES_MACROS.
    If not, the platform-specific code should implement the following two functions.
*/
#ifndef PLATFORM_QUANTUM_USES_MACROS
void plat_stop_quantum();     /* Stop the currently-running quantum (task time-slice)     */
void plat_start_quantum();    /* Start a new quantum                                      */
#endif

s32 plat_dev_enumerate();

s32 plat_get_cpu_clock(u32 *clk);   /* Get CPU clock frequency in Hz                            */

/*
	Base

	The platform must be able to detect the amount of installed RAM.  It must provide one red LED
	and one green LED, to be used as status indicators.  It must be provide a means of estimating
	the system clock frequency.
*/
s32 plat_led_on(ku8 leds);
s32 plat_led_off(ku8 leds);
s32 plat_clockfreq_detect();


/*
	Console

	The platform must provide a character-oriented console.  This console must be capable of
	accepting and displaying characters generated by the kernel (e.g. messages indicating the
	progress of the boot process, and system messages); it must also be able to capture and return
	user input.

	The console must be available very soon after the start of the boot process.  These functions
	will be called as soon as memory is initialised.

*/

s32 plat_console_init();			    /* Initialise console									*/
s16 plat_console_putc(const char c);    /* Write a character to the console.  May block.		*/
s16 plat_console_getc(void);		    /* Read a character from the console.  Must block.  	*/

#undef IN_PLATFORM_H

#endif
