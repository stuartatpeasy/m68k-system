20th July 2011

Last night I managed to fix a bug which had been blocking me for a few days. The symptoms indicated
a depressingly difficult problem: after reset the system would run for a few tenths of a second
before crashing with nHALT asserted.  The length of time before the halt occurred appeared to be
affected by hand capacitance: touching various parts of the circuit had an effect on the delay
before the inevitable crash.  I also found a correlation between the length of time I held the
reset button down and the duration of stable running: longer button-pushes resulted in a longer
period of stable running, but a crash would always occur within one second.

Everything pointed to a hardware problem.  Even though the firmware had been running correctly
until the bug arose, I wanted to rule out a software problem.  I therefore rebuilt the firmware,
reducing the _main() function to an empty loop:


main.c:

	...

	void _main()
	{
		for(;;) ;
	}


firmware:

	00100000 <.text>:
	  100000:	000f fffc      								; supervisor stack pointer
	  100004:	0010 0008      	<_start>					; reset vector
	
	00100008 <_start>:
	  100008:	007c 0700      	ori.w #$0700, sr			; disable interrupts
	  10000c:	4ef9 0010 006a 	jmp 10006a <_main>			; -> _main()
		...
	
	0010006a <_main>:
	  10006a:	60fe           	bra.s $10006a <_main>		;     for(;;) ;


The problem remained, so I was satisfied that it must be hardware-related.  Initially I suspected
ground- or power-rail trouble, so I measured the resistance between the system power supply wires
and the power and ground pins of each IC.  I found unacceptably high resistance (sometimes in
excess of two ohms) in a number of cases; I replaced all such connections.  In every instance the
high resistance was caused by my re-use of old pieces of jumper wire in the circuit.  Over the
years these wires had accumulated a layer of oxide on their exposed ends; fairly obvious, really.
A resistance of two ohms in each of the two sets of +5V and ground wires supplying power to the
CPU caused a voltage drop of approximately 0.25V.  This meant that the processor saw barely 4.75V
across its power rails: this is only just within the acceptable range of operating voltages for
the MC68010.

The overall viability of the circuit was undoubtedly improved by this work, but the problem was
still present.  My next debugging step was therefore to consider what in the system had changed
since it was last working correctly.  There were two new sections: a long-overdue power-on reset
circuit and the majority of an ATA (sometimes known as "IDE") interface.  I disconnected both but
saw no improvement.  The obvious way to proceed was to start removing other parts of the circuit
in the hope that eventually the processor would start to behave and the cause of the problem would
reveal itself.

A sensible goal appeared to be to make the processor free-run.  The easiest way to do this on a
a member of the 68000 family is to tie all the processor's data bus lines and nDTACK to ground.
This has the effect of setting the supervisor stack pointer and the reset vector to 0x00000000 and
forcing the CPU to cycle through its address space endlessly, executing the instruction with the
encoding 0x0000.  Motorola were kind enough to map an instruction with no effect to this encoding,
thereby creating an implicit NOP:


	  *			0000			ori.b #0, d0				; = nop


I removed U5 and U6 (both 74HC245 octal bidirectional bus transceivers), thereby disconnecting the
68010 data bus from the memory and peripheral ICs, and fitted 10kohm SIL resistor networks on the
processor side to tie the data bus lines low.  Having tied nDTACK low I reset the system and
observed free-running.

The 68681 DUART and the memory ICs were still being driven by the address-decode logic and the
address bus, so I used a logic probe to examine their now-disconnected data buses.  The RAM ICs
appeared to be working properly: whenever the processor cycled through addresses from 0x000000-
0x0ffffe there was a clear indication that the chips were driving their D0-D7 pins.  The Flash
ROM ICs, however, were behaving differently: very weak drive was present on the data pins when
the processor was in the ROM address space, 0x100000-0x1ffffe.  Clearly the ROM chips were
working up to a point, but were causing the crashes by feeding junk instructions to the processor.

Further investigation revealed that the Flash ROM chip-select signal, nROMCS, was not within an
acceptable voltage range.  This signal is generated by U14.2 and U14.1 (74HC00 quad two-input NAND
gates), and some more logic probing showed that the inputs of U14.1 were almost floating. My
elderly breadboard had developed a high-resistance point in this connection.  A quick clean-up of
the affected tracks resolved the problem, and the system is now behaving properly again.

This was quite a frustrating problem, but the experience of solving it was salutary.  It provided
a reminder - as if another were needed! - of the power of basic debugging techniques, and of the
fact that debugging hardware is essentially the same process as debugging software.
